.colors: &colors
  yellow:         &yellow           '#F5DDA9'
  darkblue:       &darkblue         '#2F7194'
  red:            &red              '#ec7070'
  skyblue:        &skyblue          '#97c3d0'
  darkgreen:      &darkgreen        '#48675A'
  lightbrown:     &lightbrown       '#C6BFA2'
  orange:         &orange           '#EC9F7E'
  lightgreen:     &lightgreen       '#AFD8BC'
  grey:           &grey             '#3D4244'

# ======================================================================================================================
#  ╔═╗╦  ╔═╗╔╦╗╔═╗
#  ╠═╝║  ║ ║ ║ ╚═╗
#  ╩  ╩═╝╚═╝ ╩ ╚═╝
# ======================================================================================================================
# Plot the evolution of the training loss
loss:
  based_on: loss

# Plot f evaluated on the grid
forcing:
  based_on: line
  select:
    data: VPINN/f_evaluated

# Plot the values of f integrated against the test functions
f_integrated:
  based_on: line
  select:
    data: VPINN/f_integrated
  x: n_x
  helpers:
    set_tick_locators:
      x: &formatting
        major:
          name: MaxNLocator
          integer: true
      y:
        <<: *formatting

boundary_conditions:
  based_on: grid_boundary2d
  select:
    vals: VPINN/training_data
  transform:
    - .isel: [ !dag_prev , { variable: 0 } ]
      kwargs:
        drop: true
      tag: dim1
    - .isel: [ !dag_tag vals, { variable: 1 } ]
      kwargs:
        drop: true
      tag: dim2
    - .sel: [ !dag_tag vals, { variable: 'u' } ]
      kwargs:
        drop: true
      tag: n
    - xr.Dataset:
        - dim1: !dag_tag dim1
          dim2: !dag_tag dim2
          u: !dag_tag n
      tag: data
  cmap:
    continuous: true
    from_values:
      0: *darkblue
      0.5: *yellow
      1: *red
  hue: u

predictions:
  based_on: line
  select:
    prediction:
      path: VPINN/prediction_final
      transform:
        - .data: [!dag_prev ]
    solution:
      path: VPINN/u_exact
      transform:
        - .data: [!dag_prev ]
  transform:
    - operation: pd.Index
      args: [ [ 'prediction', 'exact solution' ] ]
      kwargs:
        name: 'kind'
    - xr.concat: [ [ !dag_tag prediction, !dag_tag solution ], !dag_prev ]
      tag: data
  hue: kind

# Test functions
test_function_plots/test_functions:
  based_on:
    - .creator.universe
    - .plot.facet_grid.line
  select:
    data: grid_test_function_data/test_function_values
  hue: n_x
  helpers:
    set_legend:
      use_legend: False

# Test function derivatives
test_function_plots/d1_test_functions:
  based_on: test_function_plots/test_functions
  select:
    data: grid_test_function_data/d1_test_function_values

# Plot the grid
grid_plots/grid:
  based_on: grid1d

# Plot the grid boundary with normals
grid_plots/grid_boundary:
  based_on: grid_boundary1d
  cmap:
    from_values:
      -1: *darkblue
      1: *red
