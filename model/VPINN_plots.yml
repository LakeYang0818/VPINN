# ======================================================================================================================
#  ╔═╗╦  ╔═╗╔╦╗╔═╗
#  ╠═╝║  ║ ║ ║ ╚═╗
#  ╩  ╩═╝╚═╝ ╩ ╚═╝
# ======================================================================================================================
# Plot the evolution of the training loss
loss:
  based_on: loss

# Plot f evaluated on the grid
forcing:
  based_on: plot_function_2d
  select:
    data: data/f_evaluated

# Plot the values of f integrated against the test functions
f_integrated:
  based_on: plot_function_2d
  select:
    data: data/f_integrated
  x: n_x
  y: n_y
  helpers:
    set_tick_locators:
      x: &formatting
        major:
          name: MaxNLocator
          integer: true
      y:
        <<: *formatting

# Plot the exact solution
u_exact:
  based_on: plot_function_2d
  select:
    data: data/u_exact

u_boundary:
  based_on: grid_boundary2d
  select:
    vals: data/u_exact_boundary
  transform:
    - .isel: [ !dag_prev , { variable: 0 } ]
      kwargs:
        drop: true
      tag: dim1
    - .isel: [ !dag_tag vals, { variable: 1 } ]
      kwargs:
        drop: true
      tag: dim2
    - .sel: [ !dag_tag vals, { variable: 'u' } ]
      kwargs:
        drop: true
      tag: n
    - xr.Dataset:
        - dim1: !dag_tag dim1
          dim2: !dag_tag dim2
          n: !dag_tag n
      tag: data
  cmap: ~
  hue: u

predictions:
  based_on: line
  select:
    data: VPINN/predictions

# Plot the test functions
test_functions:
  based_on: heatmap
  row: n_x
  col: n_y

# Plot the first derivative of the test functions
d1_test_functions:
  based_on: test_functions
  select:
    data: data/d1_test_function_values

# Plot the second derivative of the test functions
d2_test_functions:
  based_on: test_functions
  select:
    data: data/d2_test_function_values

# Plot the grid
grid:
  based_on: grid1d

# Plot the solution on the boundary
grid_boundary:
  based_on: grid_boundary1d
